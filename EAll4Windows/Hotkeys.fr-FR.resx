<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="lbAbout.Size" type="System.Drawing.Size, System.Drawing">
    <value>528, 19</value>
  </data>
  <data name="lLChangelog.Location" type="System.Drawing.Point, System.Drawing">
    <value>7, 3</value>
  </data>
  <data name="lLChangelog.Size" type="System.Drawing.Size, System.Drawing">
    <value>103, 13</value>
  </data>
  <data name="lLChangelog.Text" xml:space="preserve">
    <value>Liste de nouveautés</value>
  </data>
  <data name="linkDonate.Location" type="System.Drawing.Point, System.Drawing">
    <value>421, 3</value>
  </data>
  <data name="linkDonate.Size" type="System.Drawing.Size, System.Drawing">
    <value>103, 13</value>
  </data>
  <data name="linkDonate.Text" xml:space="preserve">
    <value>Donation via PayPal</value>
  </data>
  <data name="lbHotkeys.Size" type="System.Drawing.Size, System.Drawing">
    <value>497, 505</value>
  </data>
  <data name="lbHotkeys.Text" xml:space="preserve">
    <value>Cacher manette EAll4: Cacher les entrées de base (Dinput) de la EAll4 de la vérification des autres programmes si vous observez des entrées doubles en plein jeu ou si RT met le jeu en pause
Cliquez sur le côté gauche du pavé tactile: Left Touch
Cliquez sur le côté droit du pavé tactile: Right Touch
Cliquez sur le pavé tactile avec 2 doigts: Multitouch
Cliquez sur la partie supérieure du pavé tactile: Upper Touch
Guide + Start ou maintenir Guide pendant 10 secondes: Déconnecter la manette (Bluetooth seulement)
Pavé tactile + Guide: Désactiver les glissements sur le pavé tactile (le clique fonctionne toujours)
Clic sur la partie inférieure et droite du pavé tactile*: Clic droit (conseillé d'utiliser quand le côté droit est utilisé comme bouton de souris)
Deux doigts haut/bas sur la pavé tactile*: Défiler vers le Haut/Bas
Appuyer puis maintenir le pavé tactile*: Glisser du clic gauche de la souris
Glisser gauche ou droit avec 2 doigts sur le pavé tactile*: Cycle through profiles
Shift Modifer: Maintenir une action pour utiliser un autre ensemble de commandes
When mapping keyboard and mouse:
Toggle: The key will remain in a "held down" state until pressed again
Macro: Assigner plusieurs touches à une entrée
Scan du code: Les touches sont interprétées différemment. Peut-être nécessaire pour certains jeux
*si Activé</value>
  </data>
  <data name="tPHotkeys.Size" type="System.Drawing.Size, System.Drawing">
    <value>520, 384</value>
  </data>
  <data name="tLPTranslators.Location" type="System.Drawing.Point, System.Drawing">
    <value>3, 110</value>
  </data>
  <data name="tLPTranslators.Size" type="System.Drawing.Size, System.Drawing">
    <value>514, 258</value>
  </data>
  <data name="lbTranslators.Size" type="System.Drawing.Size, System.Drawing">
    <value>64, 13</value>
  </data>
  <data name="lbTranslators.Text" xml:space="preserve">
    <value>Traducteurs</value>
  </data>
  <data name="lbLinkText.Location" type="System.Drawing.Point, System.Drawing">
    <value>3, 368</value>
  </data>
  <data name="tPCredits.Size" type="System.Drawing.Size, System.Drawing">
    <value>520, 384</value>
  </data>
  <data name="tCAbout.Location" type="System.Drawing.Point, System.Drawing">
    <value>0, 19</value>
  </data>
  <data name="tCAbout.Size" type="System.Drawing.Size, System.Drawing">
    <value>528, 410</value>
  </data>
  <data name="$this.ClientSize" type="System.Drawing.Size, System.Drawing">
    <value>528, 429</value>
  </data>
</root>